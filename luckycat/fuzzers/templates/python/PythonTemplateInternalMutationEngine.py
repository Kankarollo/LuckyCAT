import json
import configparser
import pika
import logging
import os


class PythonFuzzer(object):
    '''
    Use this base class to derive your
    Python-based fuzzer from. It allows
    you to quickly enhance Lucky CAT with
    a new fuzzer that uses an internal
    mutation engine like afl.
    '''

    def __init__(self, config_path=os.path.join(os.path.dirname(
            os.path.abspath('fuzzer.cfg')), 'luckycat/fuzzers/templates/python/fuzzer.cfg')):
        super(PythonFuzzer, self).__init__()
        self.config = configparser.ConfigParser()
        self.config.read(config_path)

    def _fuzz(self):
        '''
        Implement this method in your fuzzer class.
        For a demonstration see luckycat/fuzzers/dummy_fuzzer.py.

        TODO: proper description
        :return:
            1. upon crash should return a json formatted object
            2. return stats generated by fuzzer as json object
        '''
        pass

    def create_queue_host_channel(self):
        '''
        NOTE: self.config[...] is not parsed correctly when executing
        PYTHONPATH=. python3 luckycat/fuzzers/aflfuzz/afl-luckycat.py from the LuckyCAT root dir
        '''
        connection = pika.BlockingConnection(pika.ConnectionParameters(self.config['DEFAULT']['queue_host']))
        channel = connection.channel()
        return channel, connection

    def _send_crash(self, crash_json):
        channel, conn = self.create_queue_host_channel()
        channel.basic_publish(exchange='luckycat',
                              routing_key='crashes',
                              body=json.dumps(crash_json))
        conn.close()

    def _send_stats(self, stats_json):
        channel, conn = self.create_queue_host_channel()
        channel.basic_publish(exchange='luckycat',
                              routing_key='stats',
                              body=json.dumps(stats_json))
        conn.close()

    def run(self):
        logging.getLogger("pika").setLevel(logging.WARNING)
        self._fuzz()
