import json
import configparser
import pika


class PythonFuzzer(object):
    '''
    Use this base class to derive your
    Python-based fuzzer from. It allows
    you to quickly enhance Lucky CAT with
    a new fuzzer that uses an internal
    mutation engine like afl.
    '''

    def __init__(self, config_path="fuzzer.cfg"):
        super(PythonFuzzer, self).__init__()
        self.config = configparser.ConfigParser()
        self.config.read(config_path)

    def fuzz(self):
        '''
        Implement this method in your fuzzer class.
        For a demonstration see luckycat/fuzzers/dummy_fuzzer.py.

        TODO: proper description
        :return:
            1. upon crash should return a json formatted object
            2. return stats generated by fuzzer as json object
        '''
        pass

    def create_queue_host_channel(self):
        conn = pika.BlockingConnection(pika.ConnectionParameters(
            self.config['DEFAULT']['queue_host']))
        channel = conn.channel()
        return channel, conn

    def _send_crash(self, crash_json):
        channel, conn = self.create_queue_host_channel()
        channel.basic_publish(exchange='',
                              routing_key=self.config['DEFAULT']['crash_queue'],
                              body=json.dumps(crash_json))
        channel.basic_ack()
        conn.close()

    def _send_stats(self, stats_json):
        channel, conn = self.create_queue_host_channel()
        channel.basic_publish(exchange='',
                              routing_key=self.config['DEFAULT']['stats_queue'],
                              body=json.dumps(stats_json))
        channel.basic_ack()
        conn.close()
